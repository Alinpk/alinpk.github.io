<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Alan&#39;s tiny world</title>
        <link>https://example.com/</link>
        <description>Recent content on Alan&#39;s tiny world</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>Alan</copyright>
        <lastBuildDate>Thu, 29 Aug 2024 01:55:16 +0800</lastBuildDate><atom:link href="https://example.com/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>nfs</title>
        <link>https://example.com/p/nfs/</link>
        <pubDate>Thu, 29 Aug 2024 01:55:16 +0800</pubDate>
        
        <guid>https://example.com/p/nfs/</guid>
        <description>&lt;h1 id=&#34;nfs&#34;&gt;NFS
&lt;/h1&gt;&lt;h2 id=&#34;背景&#34;&gt;背景
&lt;/h2&gt;&lt;p&gt;NFS（Network FileSystem）是在工作中搭建多机共享目录所使用的一个机制。在使用过程中，只是模糊的了解了一下其背后的机制，如果后续有继续学习的话，则会基于当前内容加以跟新完善。&lt;/p&gt;
&lt;p&gt;所以目前的内容主要是集中在简单的过一下他的机制，具体的操作步骤是什么样的，还有自己遇到的一丢丢问题。但实际的介绍过程会先演示一下整个操作过程，之后再去解释这些过程的内容以及机制。&lt;/p&gt;
&lt;h2 id=&#34;过程&#34;&gt;过程
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;首先是介绍一下演示环境，两台主机都是Linux系统，彼此之间在同一个网段内部，一个是基于arm的架构，另一个是基于x86的架构。其中文件本体是放在x86系统之上的。（之所以先介绍实验环境，是因为我也是初次使用，脱离了这套环境可能还会遇到更多的问题，比如如果不是同一个网段，是不是要考虑各种ip映射穿透一类的问题，如果两台主机一个linux另一个window，那有一些fs仅在某个机子架构上支持而另一个不被，会不会有什么坑）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接着说一下大致的操作&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# work_directory is our testing path(abs path)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# x86(server)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 先确认一下是不是安装好了nfs先关的包&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt-get install nfs-kernel-server
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mkdir -p work_diretory
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;chown nobody:nogroup work_directory &lt;span class=&#34;c1&#34;&gt;# 这个是在规范标准中说明的供NFS使用的user&amp;amp;grp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;chmod &lt;span class=&#34;m&#34;&gt;755&lt;/span&gt; work_directory
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# client_ip是可以使用通配符的，后面括号里的参数可以使用时再查阅一下，主要是权限/读写同步异步/用户映射（参考1）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;work_directory client_ip(rw, sync, no_subtree_check)&amp;#34;&lt;/span&gt;  &amp;gt;&amp;gt; /etc/exports
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo exportfs -a
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo systemctl restart nfs-kernel-server
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# sudo exportfs -v #检查一些状态&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# arm(client)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt-get install nfs-common
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mkdir -p local_dircetory
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 可以显示-t nfs，-o应该是-option，里面可以指明传输层协议以及一些细节(参考2)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo mount server_ip:work_directory local_directory -o tcp
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# df -h #检查一下&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;原理&#34;&gt;原理
&lt;/h2&gt;&lt;p&gt;NFS，网络文件系统，那就可以拆成两部分理解，网络+文件系统，首先是用起来，用户的感知上来说是无异于普通文件系统的（不过估计还是有微妙差异，网络崩了怎么处理也是需要再查阅一下文档才懂），另一部分则是他还是符合一般的网络架构，p2p 或是c/s。不过有了上面的展示其实就可以猜到，这应该是一款基于cs模式的框架。因为撇去在server端要严格核对client的名单外的场景外，我们的server是完全可以不必去理会有哪些client，”我在这里，你们来！“。反倒是client，也就是上面的arm，是需要直到我要连的具体是哪个ip的哪个文件夹。&lt;/p&gt;
&lt;p&gt;不过看到这里的时候，就产生了第一个疑问了，网络通信，那我怎么知道要怎么通信，tcp/udp，还是nfs建立于更底层的协议？不过这点显然不太可能，那估计就是有一个常用的端口了，但如果我直接朝固定端口连过去，那岂不是我两台主机间已经限定死了只有一个share directory?显然不是。所以实际架构是如下图所示：
&lt;p&gt;&lt;img src=&#34;https://example.com/image-20240829013107844.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20240829013107844&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;这里的mapping和那个daemon就是我们一开始拉起的nfs-kernel-server啦。一个负责分配端口号，另一个则是管理我们的权限问题。大体流程就如上所示。有了上面这个机制，就可以自由的建立好多的共享文件了。&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;以上便是我目前所了解到的大致原理，至于&lt;code&gt;NFS&lt;/code&gt;的&lt;strong&gt;可靠性&lt;/strong&gt;，&lt;strong&gt;一致性&lt;/strong&gt;，&lt;strong&gt;性能&lt;/strong&gt;等问题如何保证，我觉得这点很重要，因为分布式文件系统无法绕开这几个问题，但是既然它是写入标准的&lt;code&gt;NFS&lt;/code&gt;，自然在这几点会有一个合理的均衡，而分布式的学习本来也是在后续计划中，因此这里就先不深究了嘻嘻。
(btw中间创建的时候发现有些地方总是会permission denied，是因为并非所有文件系统类型都支持nfs的，遇到了这点可以去手册查一下，还有就是软链接+nfs还是挺舒服的)&lt;/p&gt;
&lt;h2 id=&#34;参考连接&#34;&gt;参考连接
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/7/html/storage_administration_guide/nfs-serverconfig#nfs-serverconfig-exports&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;configuring the nfs server&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/4/html/reference_guide/s2-nfs-client-config-options#s2-nfs-client-config-options&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;common nfs mount options&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>first plan</title>
        <link>https://example.com/p/first-plan/</link>
        <pubDate>Mon, 26 Aug 2024 01:31:39 +0800</pubDate>
        
        <guid>https://example.com/p/first-plan/</guid>
        <description>&lt;h1 id=&#34;brief-introduce&#34;&gt;brief introduce
&lt;/h1&gt;&lt;p&gt;简单的规划一下目前的几个事：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;网络技术内幕&lt;/li&gt;
&lt;li&gt;协程框架的编写，计划待定&lt;/li&gt;
&lt;li&gt;部署一个gitlab&lt;/li&gt;
&lt;li&gt;看看jeckins怎么结合到gitlab上&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;reading&#34;&gt;reading
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;ipc shmipc
jonasmr/microprofile&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>归档</title>
        <link>https://example.com/archives/</link>
        <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/archives/</guid>
        <description></description>
        </item>
        <item>
        <title>关于</title>
        <link>https://example.com/%E5%85%B3%E4%BA%8E/</link>
        <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/%E5%85%B3%E4%BA%8E/</guid>
        <description>&lt;h3 id=&#34;introduce&#34;&gt;introduce
&lt;/h3&gt;&lt;p&gt;终于开启我的博客历程，作为第一篇博文，虽然也可以用类似于&amp;quot;hello world&amp;quot;一类的开篇搪塞过去，但我还是想要好好的写一些内容，比如&lt;strong&gt;为什么要搞一个博客&lt;/strong&gt;，&lt;strong&gt;计划用博客记录些什么&lt;/strong&gt;之类的，以此来表示我是真的要认真去做这件事情的。&lt;/p&gt;
&lt;h3 id=&#34;why&#34;&gt;why
&lt;/h3&gt;&lt;p&gt;写博客的理由还是很多的，因为从开始想开一个自己的博客到实施已经过去了好久。起初是看到好多大佬都有自己的blog，那自己也搞一个，踏上强者之路！但那会儿网络是啥，github怎么登录八字都没一撇，也就没有跟下去了。再往后，自己在查阅学习的过程中，记录的方式总是有点凌乱，也没有好好的汇总在一起，有时候总会想着回过头看看自己都会些什么，结果发现回头了，但是都不知道要往哪里去查，这时候又想到了要是搞一个博客，随时随地去把自己的技能定期的更新一下，需要总结看看的时候也方便许多。还有就是，自己多少是有些分享欲的，但是又羞于拿一些浅薄的产出摆出去，这时候blog这种东西就有点合适了，反正也不署名，发出去之后不管有没有人看，总之我就是分享了，这就是我的成果！~~叉腰~~😏&lt;/p&gt;
&lt;p&gt;因为想了好久，所以理由要罗列总是能写好长的，就目前来说，最重要的一点是，是希望能够通过博客去有规律的记录自己的生活，以此来改掉散漫的毛病。&lt;/p&gt;
&lt;p&gt;后面想了想，散漫也不算毛病，这两个字看着就让我想到泛红的夕阳穿过落地窗洒在伸展身子的猫咪身上，桌上一杯见底的咖啡，沙发上蜷着一个人，慢慢的翻着几页书。这也是我向往的生活的一种吧，从容随意但却活着。倒是前面的焦虑让我有点急切的想要去否认掉各种和慢或是停滞概念相关的行为了。&lt;/p&gt;
### what
博客要写的东西我预计是有几点
- 生活的碎碎
- 学习的记录
- 一些计划/安排/心愿一类的东西
目前就大致想着这三个分类吧。也许实际上由于太懒了要删掉一个或是两个，也可能变更或是新增。总之答题就这样吧。
</description>
        </item>
        <item>
        <title>note</title>
        <link>https://example.com/p/note/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/p/note/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;https://example.com/p/note/image.png&#34;
	width=&#34;623&#34;
	height=&#34;485&#34;
	srcset=&#34;https://example.com/p/note/image_hu6425087560643260289.png 480w, https://example.com/p/note/image_hu6471641475824586964.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;128&#34;
		data-flex-basis=&#34;308px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;image container repository&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;image&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;那么镜像到底是什么呢？Docker 镜像可以看作是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/note/image-1.png&#34;
	width=&#34;675&#34;
	height=&#34;224&#34;
	srcset=&#34;https://example.com/p/note/image-1_hu7188929695297476998.png 480w, https://example.com/p/note/image-1_hu6193610043416378639.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;301&#34;
		data-flex-basis=&#34;723px&#34;
	
&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Container（容器）&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;容器（Container）的定义和镜像（Image）几乎一模一样，也是一堆层的统一视角，唯一区别在于容器的最上面那一层是可读可写的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/note/image-2.png&#34;
	width=&#34;666&#34;
	height=&#34;175&#34;
	srcset=&#34;https://example.com/p/note/image-2_hu9443565132086723119.png 480w, https://example.com/p/note/image-2_hu8326224252150990851.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;380&#34;
		data-flex-basis=&#34;913px&#34;
	
&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Repository（仓库）&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Docker 仓库是集中存放镜像文件的场所。镜像构建完成后，可以很容易的在当前宿主上运行。但是， 如果需要在其他服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry（仓库注册服务器）就是这样的服务。有时候会把仓库（Repository）和仓库注册服务器（Registry）混为一谈，并不严格区分。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;仓库又可以分为两种形式：Public（公有仓库）Private（私有仓库）Docker Registry 公有仓库是开放给用户使用、允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。除了使用公开服务外，用户还可以在本地搭建私有 Docker Registry。Docker 官方提供了 Docker Registry 镜像，可以直接使用做为私有 Registry 服务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;architecture&#34;&gt;architecture
&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://example.com/p/note/image-3.png&#34;
	width=&#34;677&#34;
	height=&#34;527&#34;
	srcset=&#34;https://example.com/p/note/image-3_hu17614280766778359786.png 480w, https://example.com/p/note/image-3_hu6335923211458321932.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;128&#34;
		data-flex-basis=&#34;308px&#34;
	
&gt;
&lt;img src=&#34;https://example.com/p/note/image-4.png&#34;
	width=&#34;678&#34;
	height=&#34;356&#34;
	srcset=&#34;https://example.com/p/note/image-4_hu810509337000192677.png 480w, https://example.com/p/note/image-4_hu9769728467029724324.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;190&#34;
		data-flex-basis=&#34;457px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Docker 的核心组件包括：&lt;/p&gt;
&lt;p&gt;Docker Client
Docker Daemon
Docker Image
Docker Registry
Docker Container&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/note/image-5.png&#34;
	width=&#34;682&#34;
	height=&#34;171&#34;
	srcset=&#34;https://example.com/p/note/image-5_hu3575342517905310407.png 480w, https://example.com/p/note/image-5_hu12609775420448134786.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;398&#34;
		data-flex-basis=&#34;957px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Docker Client&lt;/p&gt;
&lt;p&gt;简单来说就是CLI，可以构建、运行、停止运用程序，还可以远程和Docker_Host进行交互。
最常用的Docker客户端就是&lt;code&gt;docker&lt;/code&gt;命令&lt;/p&gt;
&lt;p&gt;Docker Daemon&lt;/p&gt;
&lt;p&gt;Docker Daemon是服务器组件，在Linux上以守护进程的形式运行，也是Docker的核心。
Docker Daemon 可以认为是通过 Docker Server 模块接受 Docker Client 的请求，并在 Engine 中处理请求，然后根据请求类型，创建出指定的 Job 并运行。Docker Daemon 运行在 Docker Host 上，负责创建、运行、监控容器，构建、存储镜像。&lt;/p&gt;
&lt;p&gt;以下是Docker Daemon的架构图
&lt;img src=&#34;https://example.com/p/note/image-6.png&#34;
	width=&#34;692&#34;
	height=&#34;534&#34;
	srcset=&#34;https://example.com/p/note/image-6_hu10497018117308904341.png 480w, https://example.com/p/note/image-6_hu4119302367049289543.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;129&#34;
		data-flex-basis=&#34;311px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;运行过程的作用有以下几种可能：&lt;/p&gt;
&lt;p&gt;向 Docker Registry 获取镜像。
通过 GraphDriver 执行容器镜像的本地化操作。
通过 NetworkDriver 执行容器网络环境的配置。
通过 ExecDriver 执行容器内部运行的执行工作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/note/image-7.png&#34;
	width=&#34;673&#34;
	height=&#34;817&#34;
	srcset=&#34;https://example.com/p/note/image-7_hu17690913522464185546.png 480w, https://example.com/p/note/image-7_hu4381437563304940313.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;82&#34;
		data-flex-basis=&#34;197px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;链接：https://zhuanlan.zhihu.com/p/600034612&lt;/p&gt;
</description>
        </item>
        <item>
        <title>note</title>
        <link>https://example.com/p/note/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/p/note/</guid>
        <description>&lt;h2 id=&#34;working-note&#34;&gt;working note
&lt;/h2&gt;&lt;h4 id=&#34;__stdcall&#34;&gt;__stdcall
&lt;/h4&gt;&lt;p&gt;1.definition&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;__stdcall 调用约定用于调用 Win32 API 函数。 被调用方将清理堆栈，以便让编译器生成 vararg 函数 __cdecl。 使用此调用约定的函数需要一个函数原型。 __stdcall 修饰符是 Microsoft 专用的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2.why&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;先感受一下两种风格的效果&lt;/p&gt;
&lt;/blockquote&gt;
 &lt;p&gt;传统上的约定应该是__cdecl，这个约定是函数传递的参数，应该由调用方去清理，从汇编角度看，类似于：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/* example of __cdecl */
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;push arg1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;push arg2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;push arg3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;call function
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;add esp,12    ; effectively &amp;#34;pop; pop; pop&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt; &lt;p&gt;__stdcall的约定风格是在Win32 API函数的标准约定，做法如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/* example of __stdcall */
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;push arg1 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;push arg2 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;push arg3 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;call function // no stack cleanup - callee does this
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;这样就有比较只管的感受了，从汇编码的角度来说，__stdcall把清理的职责归属到了callee，这样在大型项目中，可能会编译出更小的可执行程序。 另一方面，如果使用过C风格的变长参数便可以，虽然我们在语义层面上可以用类似于&lt;code&gt;argc&lt;/code&gt;,&lt;code&gt;argv&lt;/code&gt;的模式去明确参数的数量规则，但编译器层面去统一的约束这点是很困难的，所以__stdcall是不支持这种风格的边长参数的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br&gt;这里给出win32流行的一些调用约定（实际跨平台项目我们一般会在非win环境定义对应的空白宏&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;__stdcall, 以相反的顺序（从右到左）将参数压入堆栈&lt;/li&gt;
&lt;li&gt;__cdecl, 以相反的顺序（从右到左）将参数压入堆栈&lt;/li&gt;
&lt;li&gt;__clrcall, 按顺序（从左到右）将参数加载到 CLR 表达式堆栈中。&lt;/li&gt;
&lt;li&gt;__fastcall, 存储在寄存器中，然后压入堆栈&lt;/li&gt;
&lt;li&gt;__thiscall, 入栈；此指针存储在 ECX 中&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;__attribute__&#34;&gt;&lt;strong&gt;attribute&lt;/strong&gt;
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;visibility(default)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以用来定义一些符号是不是可见，可以用来发布api&lt;/p&gt;</description>
        </item>
        <item>
        <title>note</title>
        <link>https://example.com/p/note/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/p/note/</guid>
        <description>&lt;hr&gt;
&lt;h2 id=&#34;--draft&#34;&gt;title: &amp;ldquo;note&amp;rdquo;
draft: true
categories:
- unarchives
tags:
- draft
&lt;/h2&gt;&lt;h3 id=&#34;杂七杂八&#34;&gt;杂七杂八
&lt;/h3&gt;&lt;h4 id=&#34;进程调度相关&#34;&gt;进程调度相关
&lt;/h4&gt;&lt;p&gt;常见算法：
1. 实时进程调度： SCHED_FIIFO, SCHED_RR
2. 普通进程调度算法：CFS&lt;/p&gt;
&lt;p&gt;对应调度器的一些行为：
优先级上，对于实时进程，高优先级的会持续占用cpu（但一般会默认留下5%的资源给普通进程）
对于CFS，其一个重要的运行时参数是所谓的vruntime，其公平策略的核心就是保障每个进程在vruntime的数值上尽可能的相同。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们启动进程时设定的nice值越大，相同时间下vruntime增长的速度就越慢。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;此外CFS的公平机制可以是基于同一个CGROUP下的线程而言的，更具体的说：在cpu.share一致的场景下，CFS会尽可能的让每个thread的vruntime一致，这样会导致同一个CGROUP下的进程开越多的CPU就能获获取到更多的CPU时间片&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;对于CGROUP资源调控可以通过对cgoup.procs和cpu.cfs_quota_us进行配置实现&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>检索</title>
        <link>https://example.com/search/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/search/</guid>
        <description></description>
        </item>
        <item>
        <title>资源</title>
        <link>https://example.com/%E8%B5%84%E6%BA%90/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/%E8%B5%84%E6%BA%90/</guid>
        <description></description>
        </item>
        
    </channel>
</rss>
