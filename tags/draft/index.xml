<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Draft on Alan&#39;s tiny world</title>
        <link>https://example.com/tags/draft/</link>
        <description>Recent content in Draft on Alan&#39;s tiny world</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>Alan</copyright>
        <lastBuildDate>Mon, 26 Aug 2024 01:31:39 +0800</lastBuildDate><atom:link href="https://example.com/tags/draft/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>first plan</title>
        <link>https://example.com/p/first-plan/</link>
        <pubDate>Mon, 26 Aug 2024 01:31:39 +0800</pubDate>
        
        <guid>https://example.com/p/first-plan/</guid>
        <description>&lt;h1 id=&#34;brief-introduce&#34;&gt;brief introduce
&lt;/h1&gt;&lt;p&gt;简单的规划一下目前的几个事：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;网络技术内幕&lt;/li&gt;
&lt;li&gt;协程框架的编写，计划待定&lt;/li&gt;
&lt;li&gt;部署一个gitlab&lt;/li&gt;
&lt;li&gt;看看jeckins怎么结合到gitlab上&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;reading&#34;&gt;reading
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;ipc shmipc
jonasmr/microprofile&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>note</title>
        <link>https://example.com/p/note/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/p/note/</guid>
        <description>&lt;hr&gt;
&lt;h2 id=&#34;--draft&#34;&gt;title: &amp;ldquo;note&amp;rdquo;
draft: true
categories:
- unarchives
tags:
- draft
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://example.com/p/note/image.png&#34;
	width=&#34;623&#34;
	height=&#34;485&#34;
	srcset=&#34;https://example.com/p/note/image_hu6425087560643260289.png 480w, https://example.com/p/note/image_hu6471641475824586964.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;128&#34;
		data-flex-basis=&#34;308px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;image container repository&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;image&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;那么镜像到底是什么呢？Docker 镜像可以看作是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/note/image-1.png&#34;
	width=&#34;675&#34;
	height=&#34;224&#34;
	srcset=&#34;https://example.com/p/note/image-1_hu7188929695297476998.png 480w, https://example.com/p/note/image-1_hu6193610043416378639.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;301&#34;
		data-flex-basis=&#34;723px&#34;
	
&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Container（容器）&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;容器（Container）的定义和镜像（Image）几乎一模一样，也是一堆层的统一视角，唯一区别在于容器的最上面那一层是可读可写的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/note/image-2.png&#34;
	width=&#34;666&#34;
	height=&#34;175&#34;
	srcset=&#34;https://example.com/p/note/image-2_hu9443565132086723119.png 480w, https://example.com/p/note/image-2_hu8326224252150990851.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;380&#34;
		data-flex-basis=&#34;913px&#34;
	
&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Repository（仓库）&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Docker 仓库是集中存放镜像文件的场所。镜像构建完成后，可以很容易的在当前宿主上运行。但是， 如果需要在其他服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry（仓库注册服务器）就是这样的服务。有时候会把仓库（Repository）和仓库注册服务器（Registry）混为一谈，并不严格区分。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;仓库又可以分为两种形式：Public（公有仓库）Private（私有仓库）Docker Registry 公有仓库是开放给用户使用、允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。除了使用公开服务外，用户还可以在本地搭建私有 Docker Registry。Docker 官方提供了 Docker Registry 镜像，可以直接使用做为私有 Registry 服务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;architecture&#34;&gt;architecture
&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://example.com/p/note/image-3.png&#34;
	width=&#34;677&#34;
	height=&#34;527&#34;
	srcset=&#34;https://example.com/p/note/image-3_hu17614280766778359786.png 480w, https://example.com/p/note/image-3_hu6335923211458321932.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;128&#34;
		data-flex-basis=&#34;308px&#34;
	
&gt;
&lt;img src=&#34;https://example.com/p/note/image-4.png&#34;
	width=&#34;678&#34;
	height=&#34;356&#34;
	srcset=&#34;https://example.com/p/note/image-4_hu810509337000192677.png 480w, https://example.com/p/note/image-4_hu9769728467029724324.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;190&#34;
		data-flex-basis=&#34;457px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Docker 的核心组件包括：&lt;/p&gt;
&lt;p&gt;Docker Client
Docker Daemon
Docker Image
Docker Registry
Docker Container&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/note/image-5.png&#34;
	width=&#34;682&#34;
	height=&#34;171&#34;
	srcset=&#34;https://example.com/p/note/image-5_hu3575342517905310407.png 480w, https://example.com/p/note/image-5_hu12609775420448134786.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;398&#34;
		data-flex-basis=&#34;957px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Docker Client&lt;/p&gt;
&lt;p&gt;简单来说就是CLI，可以构建、运行、停止运用程序，还可以远程和Docker_Host进行交互。
最常用的Docker客户端就是&lt;code&gt;docker&lt;/code&gt;命令&lt;/p&gt;
&lt;p&gt;Docker Daemon&lt;/p&gt;
&lt;p&gt;Docker Daemon是服务器组件，在Linux上以守护进程的形式运行，也是Docker的核心。
Docker Daemon 可以认为是通过 Docker Server 模块接受 Docker Client 的请求，并在 Engine 中处理请求，然后根据请求类型，创建出指定的 Job 并运行。Docker Daemon 运行在 Docker Host 上，负责创建、运行、监控容器，构建、存储镜像。&lt;/p&gt;
&lt;p&gt;以下是Docker Daemon的架构图
&lt;img src=&#34;https://example.com/p/note/image-6.png&#34;
	width=&#34;692&#34;
	height=&#34;534&#34;
	srcset=&#34;https://example.com/p/note/image-6_hu10497018117308904341.png 480w, https://example.com/p/note/image-6_hu4119302367049289543.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;129&#34;
		data-flex-basis=&#34;311px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>note</title>
        <link>https://example.com/p/note/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/p/note/</guid>
        <description>&lt;h2 id=&#34;working-note&#34;&gt;working note
&lt;/h2&gt;&lt;h4 id=&#34;__stdcall&#34;&gt;__stdcall
&lt;/h4&gt;&lt;p&gt;1.definition&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;__stdcall 调用约定用于调用 Win32 API 函数。 被调用方将清理堆栈，以便让编译器生成 vararg 函数 __cdecl。 使用此调用约定的函数需要一个函数原型。 __stdcall 修饰符是 Microsoft 专用的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2.why&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;先感受一下两种风格的效果&lt;/p&gt;
&lt;/blockquote&gt;
 &lt;p&gt;传统上的约定应该是__cdecl，这个约定是函数传递的参数，应该由调用方去清理，从汇编角度看，类似于：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/* example of __cdecl */
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;push arg1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;push arg2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;push arg3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;call function
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;add esp,12    ; effectively &amp;#34;pop; pop; pop&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt; &lt;p&gt;__stdcall的约定风格是在Win32 API函数的标准约定，做法如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/* example of __stdcall */
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;push arg1 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;push arg2 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;push arg3 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;call function // no stack cleanup - callee does this
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;这样就有比较只管的感受了，从汇编码的角度来说，__stdcall把清理的职责归属到了callee，这样在大型项目中，可能会编译出更小的可执行程序。 另一方面，如果使用过C风格的变长参数便可以，虽然我们在语义层面上可以用类似于&lt;code&gt;argc&lt;/code&gt;,&lt;code&gt;argv&lt;/code&gt;的模式去明确参数的数量规则，但编译器层面去统一的约束这点是很困难的，所以__stdcall是不支持这种风格的边长参数的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br&gt;这里给出win32流行的一些调用约定（实际跨平台项目我们一般会在非win环境定义对应的空白宏&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;__stdcall, 以相反的顺序（从右到左）将参数压入堆栈&lt;/li&gt;
&lt;li&gt;__cdecl, 以相反的顺序（从右到左）将参数压入堆栈&lt;/li&gt;
&lt;li&gt;__clrcall, 按顺序（从左到右）将参数加载到 CLR 表达式堆栈中。&lt;/li&gt;
&lt;li&gt;__fastcall, 存储在寄存器中，然后压入堆栈&lt;/li&gt;
&lt;li&gt;__thiscall, 入栈；此指针存储在 ECX 中&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;__attribute__&#34;&gt;&lt;strong&gt;attribute&lt;/strong&gt;
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;visibility(default)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以用来定义一些符号是不是可见，可以用来发布api&lt;/p&gt;</description>
        </item>
        <item>
        <title>note</title>
        <link>https://example.com/p/note/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/p/note/</guid>
        <description>&lt;hr&gt;
&lt;h2 id=&#34;--draft&#34;&gt;title: &amp;ldquo;note&amp;rdquo;
draft: true
categories:
- unarchives
tags:
- draft
&lt;/h2&gt;&lt;h3 id=&#34;杂七杂八&#34;&gt;杂七杂八
&lt;/h3&gt;&lt;h4 id=&#34;进程调度相关&#34;&gt;进程调度相关
&lt;/h4&gt;&lt;p&gt;常见算法：
1. 实时进程调度： SCHED_FIIFO, SCHED_RR
2. 普通进程调度算法：CFS&lt;/p&gt;
&lt;p&gt;对应调度器的一些行为：
优先级上，对于实时进程，高优先级的会持续占用cpu（但一般会默认留下5%的资源给普通进程）
对于CFS，其一个重要的运行时参数是所谓的vruntime，其公平策略的核心就是保障每个进程在vruntime的数值上尽可能的相同。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们启动进程时设定的nice值越大，相同时间下vruntime增长的速度就越慢。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;此外CFS的公平机制可以是基于同一个CGROUP下的线程而言的，更具体的说：在cpu.share一致的场景下，CFS会尽可能的让每个thread的vruntime一致，这样会导致同一个CGROUP下的进程开越多的CPU就能获获取到更多的CPU时间片&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;对于CGROUP资源调控可以通过对cgoup.procs和cpu.cfs_quota_us进行配置实现&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
